# listeleri birleştirmek:
lst = [3] + [4] # lst --> [3, 4]


# listeyi tersten okumak için:
    lst = [1, 2, 3]
    for i in reversed(lst):
        print(i) # 3,2,1 basar
#Yalniz şunu yaparsan hata veriyor:
return reversed(lst)
# Çünkü return type o zaman list değil iterator oluyor. Onun yerine list(reversed(lst)) yapabilirsin ya da return etmeden önce lst.reverse() yapıp return lst yapmalısın.
        
#* String i şu şekilde terse çeviriyoruz, iki yöntem de olur

	original_string = "Hello, World!"
    reversed_string = original_string[::-1]
    reversed_string = ''.join(reversed(original_string))
	
	#-1 yerine -2 ya da 2 vs kullanınca her 2 karakterde birini basıyor, "Hlo Wrd" gibi

s = "abcdefgh"

# Slicing with start, end, and step values
sliced1 = s[1:6:2]  # Output: "bdf"
sliced2 = s[::3]    # Output: "adg"
sliced3 = s[:4]     # Output: "abcd"
sliced4 = s[2:]     # Output: "cdefgh"    


#* Kalan işlemi şu şekilde
  remainder = 123 % 10 # sonuç 3

#* Aşağıya yuvarlama:
  round_down = 17 // 5 # sonuç 3

#* 
  for i in range(5) # 0 1 2 3 4
  for i in range (5,-1,-1) # 5 4 3 2 1 0
  for i in range(0, 9, 3): # 0 3 6

#* 
    s = 'deneme'
    print(s[1:3]) # en  

#*
    import re
    s = re.sub(r'[^a-z0-9]', '', s)  #  The expression [^a-z0-9] matches any character that is not a lowercase letter or a digit.  
    # The r before the pattern string indicates a "raw string," which is used to treat the backslashes (\) as literal characters rather than escape characters.
    print(re.sub(r'[.]', '[.]', "111.000.255")) # "111[.]000[.]255" döndürüyor, soru zaten bunu istiyordu.

#küçük harfe çevirmek için:
s = s.lower()

    
#* 
  ord(character) - 64# 'A' için 1, B için 2 verir ama küçük harf için 64 olmaz. Daha güzeli
  ord(character) - ord('A') + 1 # istersen ord('a') yaparsın. 
  chr(ord('a')) # bu ekrana 'a' basar, loop içinde chr(ord('a') + i) diye dönerek, tüm alfabeyi bir listeye aldırabilirsin ya da dictionary key yapabilirsin.

#* 
  s = "deneme"
  s.index("e") # 1 basar çünkü ilk e harfi 1. indexde
  s.index("e",2) # 3 basar çünkü 2. indexten sonraki ilk e harfi 3. index te
  for idx in s:
    print(s.index(idx)) #0 1 2 1 4 3 basıyor.
  # 205. Isomorphic Strings sorusunda kullanılıyor. Kelime içinde her harfe unique sayı atamayı sağlıyor. e harfi 10 kere de bulunsa, ilk e harfinin değerini hashmap(dictionary) e atıyorsun.
  
#* 
    my_dict = {"a": 1, "b": 2, "c": 3}

    if "d" not in my_dict:
        print("'d' is not a key in the dictionary.")
    else:
        print("'d' is a key in the dictionary.")

#* Return etmen gereken şey string ise ve bu stringi loop içinde karakter by karakter dolduruyorsan şunu yaparsın
str = []
str.append('a')
str.append(source[i])

return ''.join(str)

# 1678. Goal Parser Interpretation sorusunu tek satırda şöyle çözmüşler:
return command.replace('()','o').replace('(al)','al')

#*   
    str = "deneme"
    str[0] = 'f'
    print(str[0])
    # this gives error because Strings in Python are immutable, meaning you cannot modify individual characters in-place.
    modified_str = list(str) # bunu yaptıktan sonra artık modified_str[0] = 'm' vs yapabilirsin.
    #En sonda string return edeceksen de şöyle oluyor:
    return ''.join(modified_str)

# List comprehension diye bir olay var, şu syntax ile çalışıyor:

numbers = [1, 2, 3, 4, 5]
squares = [x ** 2 for x in numbers]
# Result: [1, 4, 9, 16, 25]

numbers = [1, 2, 3, 4, 5]
even_numbers = [x for x in numbers if x % 2 == 0]
# Result: [2, 4]

text = "Hello, World!"
uppercase_letters = [char for char in text if char.isupper()]
# Result: ['H', 'W']

numbers = [1, 2, 3, 4, 5]
result = ["even" if num % 2 == 0 else "odd" for num in numbers]
# Result: ['odd', 'even', 'odd', 'even', 'odd']

names = ["Alice", "Bob", "Charlie"]
name_lengths = {name: len(name) for name in names}
# Result: {'Alice': 5, 'Bob': 3, 'Charlie': 7}  

# List i alıyor, dictionary yapıyor ya da hashset  

nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
flattened = [num for sublist in nested_list for num in sublist]
# Result: [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Sanki içiçe 2 loop  yapıyor ve değerini bir liste olarak yazdırıyor.
# Burda kilit olan "for i in some_list" kısmı, sonrası akla gelir


#* 
  ret.append(char_map.get(chr, chr)) 
# Burda şunu yapıyo, char_map dictionary de eğer aradığı key i bulamazsa, aradığı değeri aynen append ediyor. nvl() gibi sql deki

* # dict, chr gibi built-in isimleri kullanma 

* if rev[i] in '123456789':  # Karakter bir sayı mı bu şekilde bakılabilir.

*   lst = []
    lst.append('d')
    lst.append('e')
    lst.append('l')
    lst[-1] += 'a'
    print((lst[-1])[::-1])
    # lst += 'a' yapsaydık, yeni bir node açıp 'a'  yı eklerdi. Bu şekilde en son nodu 'la'  yaptı. print içindeki yapı da ilginç, o nodu array gibi gösterip terse çevirebiliyoruz.

* # Eğer bir listeden sayıları string olarak okuduysan, onu başka listede indice olarak kullanamazsın, int() ile cast etmen lazım.
  # Aynı şekilde mesela print("test:" + 8) deyince de hata veriyor, onu da print(f"test: {8}") diye formatlayabilirsin veya "str(8)" deyip cast edebilirsin.

* # Başta dictionary tanımlayıp,mesela key integer olsun, value da list of string olsun dersen şu örnekteki gibi yapmalısın:

    number_groups = {}

    # Sample list of strings
    strings = ["apple", "banana", "cherry", "date", "elephant", "fig"]

    # Group words by their lengths
    for word in strings:
        length = len(word)
        if length in number_groups:
            number_groups[length].append(word) ####Burda dictionary e değil value ya yani list type olan kısma append ediyor, direkt number_groups.append zaten yok dictionary de.
        else:
            number_groups[length] = [word]

    # Print the dictionary
    for length, words in number_groups.items():
        print(f"Words with length {length}: {words}")

    '''
    Words with length 5: ['apple', 'cherry']
    Words with length 6: ['banana']
    Words with length 4: ['date']
    Words with length 8: ['elephant']
    Words with length 3: ['fig']
    '''
    
# Dictionary de key ve value ye nasıl ulaşılır?
    my_dict = {"a": 1, "b": 2, "c": 3}

    for key in my_dict:
        print(key)

    for keys in my_dict.keys():
        print(keys)

    for vals in my_dict.values():
        print(vals)

    for key, value in my_dict.items():
        print(key)
        print(value)
        print(key + str(value))    

 #49. Group Anagrams sorusunun aşağıdaki kodu çok güzel:
  # sorted() fonksiyonu içine "word" variable string olarak giriyor ama bu fonksiyon onu list of characters yapıyor. Bu yüzden "join" ile tekrar string yaptı
  # anagram_dict[word_key] = [word] kullanımında "[word]" yapmasının nedeni value nun list data type olmasını sağlamak, yoksa direkt "word" olsa o zaman üstteki append hata veriyor
  # çünkü append string te çalışmıyor, list data type ta çalışıyor.
  # return ederkenki ifade de cast açısından güzel.

    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        #Input: strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
        #Output: [["bat"], ["nat", "tan"], ["ate", "eat", "tea"]]

        anagram_dict = {}

        for word in strs:
            word_key = ''.join(sorted(word))###sorted() hem string  hem de list tipine uygulanabilir. Sonucu list döner, bunu da join ile string e çevirebilirsin

            if word_key in anagram_dict:
                anagram_dict[word_key].append(word)
            else:
                anagram_dict[word_key] = [word]

        return list(anagram_dict.values())    


#*
 str = str_array[0] + str_array[1] #Bu şekilde character toplamı ile string elde edebilirsin.        
        
        
        
        
* #1910. Remove All Occurrences of a Substring
    s_new = s

    while part in s_new:
        s_new = s_new[0:s_new.index(part)] + s_new[s_new.index(part)+len(part) : len(s_new)]
    
    return s_new
    
    #Bu kodda index kullanımı güzel

* # bu [i:j] meselesini aşağıdaki örnekle anlıyorsun iyice. İndisleme aslında soldan sağa 0,1,2..  sağdan,sola -1,-2,-3.. diye yapılıyor.
  # ilk 2 sonucun aynı olması bu mantıktan.
    s = "denemelik"
    print(s[:-3]) #deneme
    print(s[:6])  #deneme
    print(s[:3])  #den
    print(s[-3:]) #lik
    print(s[3:])  #emelik  

#* Burda unique olarak sayıları ekleyip, set yapiyor
    # mesela en başta my_set = {3} desek, bunun type ı set olur ama my_dict = {3:5} dersek bunun type ı dictionary olur.
    # ama my_set = {} dersek bu set olmaz, dictionary olur.
    # boş set tanımlamak için şunu yaparsın: my_set = set() ve eleman eklemek istersen my_set.add(3), çıkarmak için my_set.remove(3)
    # ama eleman sette yoksa hata verir, my_set.discard(3) hata vermez yoksa bile
    # my_set.pop() rastgele eleman çıkarır, my_set.clear() tüm seti siler.
    my_list = [1, 2, 3, 4, 2, 3, 5]
    my_set = {item for item in my_list}
    my_total = sum(my_set) # tüm sayıları topluyor

#* words["apple", "orange", "banana"]
for i, word in enumerate(words):
    print(f"{i},{word}")
#Output: 0,apple ....   

#* 202. Happy Number
# Hem sum(list) yapmasi, hem for loop kullanımı, hem de basit mantığı oldukça güzel bir çözüm
'''
Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
'''
class Solution(object):
    def isHappy(self, n):
        hset = set()
        while n != 1:
            if n in hset: return False
                hset.add(n)
                n = sum([int(i) ** 2 for i in str(n)])
            else:
                return True

#* Sort a dictionary according to values(item[1] refers to value, item[0] refers to key)                
    my_dict = {'apple': 3, 'banana': 1, 'orange': 5, 'grape': 2}
    sorted_dict = dict(sorted(my_dict.items(), key=lambda item: item[1])) # ascending order
    sorted_dict = dict(sorted(my_dict.items(), key=lambda item: item[1], reverse=True)) # descending order
#Önce value sonra key e göre sort için aşağıdakini kullan. -x[1] number ise işe yarıyor, stringde hata veriyor, onun için reverse=True yapıyorsun.
#O zaman hem key hem value descending oluyor, sayı olan değeri yani value yu -x[1] ile ascending yapabiliyorsun    

#https://leetcode.com/problems/top-k-frequent-words/submissions/
#Bu soruda value ya göre descending, key e göre ascending i şöyle yaptım:
sorted_dict = dict(sorted(my_dict.items(), key=lambda item: (-item[1],item[0])))

# 347. Top K Frequent Elements
# Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        my_dict = {}
        for i in nums:
            if i not in my_dict:
                my_dict[i] = 1
            else:
                my_dict[i] += 1
        
        sorted_dict = dict(sorted(my_dict.items(), key=lambda item: item[1], reverse=True)) 
        
        first_k_keys = list(sorted_dict.keys())[:k] # burdaki mantık da güzel, key ya da value ya da her ikisi bu şekilde listeye dönüşünce [:k] slice almanı sağlıyor.

        return first_k_keys

# 128. Longest Consecutive Sequence
    # Burda aynı sinking island mantığı kullandım, tek seferde direkt notepad a yazdım çalıştı. Sol ve sağ pointer tutup, üstünden geçtiğim elemanın değerini 0 yaptım dictionary da

# 680. Valid Palindrome II
    # Burda ilk hatayi bulana kadar kodu çalıştırıyorum, sonra ilk hatada başka bir method çağırıyorum. Ama şuna dikkat etmeli:
    # indis i = 1, j = 3 ise s[i+1, j] gönderirsen j = 3 ü kaçırırsın,j değeri 2 olarak gidiyor, j + 1 göndermen lazım.
    s = "abc"
    print(s[0:3]) # "abc"
    

# List of lists tanımlama
my_list = [[]]  # This is a valid list of lists with one empty inner list.
# böyle yaparsan içinde bir eleman tutmuş olur onun yerine, klasik liste tanımla: my_list = [], sonra sorted_list = sorted(list1) ve my_list.append(sorted_list) yaparsın.
sorted_list = sorted(my_list, reverse=True) # bu da 9,8,7... diye sort eder.


    
# bir listeyi kendi içinde sort etmek için:
my_list = [4, 2, 7, 1, 9, 5]
my_list.sort()  # This will sort the list in-place
## new_list = my_list.sort() dersen hata olur, bu sadece aynı liste üstünde bir işlem, assign için aşağıdaki "sorted()" kullanılmalı


#Sort edilmiş yeni bir liste yapmak için:
my_list = [4, 2, 7, 1, 9, 5]
sorted_list = sorted(my_list)  # This creates a new sorted list    

# List kullanarak for loop yazmadan dictionary yapma kodu: 
# num[i] key oluyor, i de value, istersen değiştirebilirsin duruma göre
my_dict = {nums[i] : i for i in range(len(nums))}

# 1 den 10 a kadar sayılardan oluşacak liste şöyle yapılıyor:
my_list = [i for i in range(1,11)]

# Dictionary de ikişerli item compare etmek için ve a==b, b==a gibi çifte tekrar olmasın diye şunu kullanıyosun:
from itertools import combinations
my_dict = {'a': 1, 'b': 2, 'c': 3}
for (key1, value1), (key2, value2) in combinations(my_dict.items(), 2):
    print(key1, value1, key2, value2)
    #a1b2, a1c3, b2c3 basar yani tüm kombinasyonları tekrar etmeden basıyor.

#Dictionary de item silme:
my_dict = {'a': 1, 'b': 2, 'c': 3}
removed_value = my_dict.pop('b')  # Removes the key 'b' and returns its associated value

#11. Container With Most Water
# Bu soruda sağdan ve soldan pointer ile içeri doğru ilerliyosun ama ilerleme şöyle oluyor hangisi daha küçükse onunkini iterate ediyorsun içeri doğru.
# bu en fazla su miktarını hesaplatıyor çubuk grafikte.


#min-heap diye bir yapı var. Bu bir tree yapısı, parent her zaman child node lardan eşit veya küçük olmalı.
#Kod olarak şu şekilde:
import heapq
min_heap = [] # boş liste tanımlayıp, onu doldurtuyoruz. Ağaca dizerken küçükten büyüğe doğru soldan sağa dizilir. Yani root --> soldaki 2 eleman, sağdaki iki eleman sırasıyla, sonra yeni level a geçer aşağıdaki dalı doldurur.
heapq.heappush(min_heap, 5)
heapq.heappush(min_heap, 2)
heapq.heappush(min_heap, 8)
min_element = heapq.heappop(min_heap) # root node  yani 2 yi getirir, sonra ağaç 5 ve 8 ile tekrar oluşur arka tarafta

#set te şu trick, belki list ya da dict de öyledir(boşsa yapı, false, en az bir eleman varsa true veriyor):
    my_set = set()
    my_set.add(5)
    if my_set:
        print("dolu")

# Listeye aynı elemanları yükleme:
lst = [False]*10
    print(lst) # içinde 10 tane False olan liste yapar. [3] dersen 10 tane 3 olur listende        

# Bir method birşey return etmeyecekse -> None diye belirtiyosun, syntax olarak böyle yazıyosun bu kısmı omit etmek yerine.

# Ayrı bir method yazmaktansa sum yapmak için aşağıdaki syntax ı kullan:
sum = lambda x, y: x + y
result = sum(4, 5)
print(result)

#Listenin sonundan eleman silmek için 3 yöntem:
my_list.pop()
my_list = my_list[:-1]
del my_list[-1] 

# eval() diye bir function var, bir tutorial dikkatli kullanın istemediğiniz sonuçlar verebilir demişti. Zaten performansı rezalet ama kullanımı şöyle:
if ch in ("+", "-", "*", "/"):
    num1 = my_stack.pop()
    num2 = my_stack.pop()
    my_stack.append(int(eval(f"{num2} {ch} {num1}")))

#COUNTER sınıfına bir bak, bu sayıların frekansını veren, gerekirse direkt o hazır yapıyı kullanırsın sıkışırsan, bunun altına bir örnek ekle öğrenince

# set i parameter ve return type olarak şu şekilde kullanıyoruz:
def dp(self, lst: List[str], st: set) -> set():

#22. Generate Parentheses (Backtracking için güzel bir örnek)
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        res=[]
        def gen(lcount,rcount,tmp):
            nonlocal res
            if lcount==0 and rcount==0:
                res.append(tmp)
            if lcount>0:
                gen(lcount-1,rcount,tmp+"(")
            if rcount>lcount:
                gen(lcount,rcount-1,tmp+")")

        gen(n,n,"")
        return res

#Stack kullanmak için bir tane List tanımlıyorsun. Sonra ona append ediyorsun yani push, sonra pop yapıyorsun LIFO yapıyor. arada del my_stack[2] deyip ortadakini de silebilirsin.        

#Zip function kullanımı:
names = ("Ali", "Veli", "Deli")
comps = ("Apple", "Google", "Dell")

zipped = zip(names,comps)

for (a,b) in zipped:
    print(a,b)  # Ali Apple basar ve alt alta diğerlerini basar
    #853 - car fleet sorusunda şu şekilde kullanımı var:
    sorted_position = sorted(zip(position,speed), reverse = True)
    #sort işlemi position a göre yapıyor ve 10,9,8 diye sort ediyor.
    #2 listeyi zip ettiği için oluşan yeni yapı da bir list.

#List of lists kullanımı şu şekilde:
#stack.pop()[1] --> burda pop edilen liste olduğu için onun 2. elemanına bu şekilde ulaşılıyor. İndis değeri basılmak istense [0] kullanılırdı.
#stack[-1][1], son elemanın j değeri, yani append ederken(indis,value) koyulduğuna göre value değeri
    temp = [1, 2, 3]
    stack = []

    for i, j in enumerate(temp):
        while stack and j > stack[-1][1]:
            print(stack.pop()[1])  # Print the value 'j'
        stack.append([i, j])

    # Print any remaining elements in the stack
    while stack:
        print(stack.pop()[1])  # Print the value 'j'   


x,y = divmod(12,5) # x == 2, y == 2 olur. 12//5 = 2(x yani bölüm), 12-10 = 2 (y yani kalan)
math.ceil(7/5) # sonuc 2 olur. import math yapmalı en başta


#Binary search kodu bu şekilde yazılır. mid_ver +- 1 olayına ve min_ver <= max_ver conditiona dikkat et.
    def searchMatrix(self, matrix: List[int], target: int) -> bool:
        min_ver = 0
        max_ver = len(matrix) - 1


        while min_ver <= max_ver:
            mid_ver = (max_ver + min_ver) // 2

            if matrix[mid_ver] == target:
                return True
            elif matrix[mid_ver] < target:
                min_ver = mid_ver + 1
            else:
                max_ver = mid_ver - 1

        return False

#split fonksiyonu / ile yapılınca, // gördüğünde, bu ikisi arasında olan null değere göre / karakterini replace ediyor. Yani sanki arada birşey var gibi düşün ama yok:)
    str = "/home/kurt//deneme///dosya/.././"
    res = ""

    for word in str.split('/'):
        res += word
    print(res)
    #Sonuc: homekurtdenemedosya...

#set() aldığı listeyi unique elemanlar olarak tekrar oluşturur:
    my_list = [1,1,2,2,4]
    my_set = set(my_list)
    print(my_set) # 1,2,4 basar    

#Fonksiyon içinde fonksiyon örneği yaz, bir de dışarda fonksiyon yazıp çağırma örneği. self ile çağırma vs syntax karışmasın. İçerde yazdığnda parameter veri tipi vermiyorsun.


#List içinde tuple veya list veya set tutabilirsin. Hepsini aynı anda tutup, listeyi karışık type olarak kullanabilirsin.
#Ama set içinde liste olmaz çünkü onu unique nasıl tutacağını bilemez, "unhashable type" hatası verir. Set içinde set de olmaz. Integer, string vs koyman lazım


#Şu şekilde bir kullanım var:
    my_list = []
    my_list.append([1,2])
    print(my_list[-1][1]) # 2 basıyor
   
    #Bir de şu var:
    my_list = [1,2,3]
    for num in my_list + [4,5,6]
        print(num)# 1 2 3 4 5 6 basar

#2 dictionary nasıl birleştirilir?
    my_dict = {1:"bir", 2:"iki"}
    my_dict2 = {3: "uc", 4: "dort"}
    my_dict.update(my_dict2)
    print(my_dict) # {1: 'bir', 2: 'iki', 3: 'uc', 4: 'dort'} basar    
# dictionary de get kullanımı:
sayi = ""
sayi = my_dict.get(3,"bulamadim")
#Bulursa value yu assign eder yoksa, 2. parametreyi assign eder. get(3) dersen de None assign eder.

# set a item ekleme ve silme:
my_set.add(3)
my_set.remove(3) # eleman yoksa hata verir
my_set.discard(3) #eleman yoksa da hata vermez    

#Bir dictionary var, her harf key ve onların sayı olarak value ları var. O anki en yüksek value kimde diye bakmak istersen:
my_dict = {"a":3, "b":2, "c":9}
max_value = max(my_dict.values())

#for i in range(len(nums)/2) hata veriyor çünkü bu bölme sonucu float oluyormuş, onun yerine //2 kullanmalı ya da int() içine almalı işlemi

#Listede ekleme append. Silme işleminde indis bazlı ya da value bazlı silebiliyorsun:
my_list.remove(5) # soldan başlayıp ilk bulduğu 5 i siliyor
del my_list[0] # ilk elemanı siliyor

#Bir string kullanarak hangi harf kaç tane varmış şeklinde bir dictionary oluşturabiliriz:
    my_dict = Counter("bbbca")
    for keys,values in my_dict.items():
        print(f"{keys} {values}")# b 3   c 1  a 1 basar

    val = my_dict.get("z",0)
    print(val)# 0 basar

#Init ve main kullaniminin en yalin hali: Bu kodun syntaxini ezbere bilmeli çünkü facebook boş kağıda tamamen çalışan kod yazmanı istiyor.
class MyClass:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def display_info(self):
        print(f"Name: {self.name}")
        print(f"Age: {self.age}")
    
    def main(self):
        print("Performing some main tasks...")
        # You can perform various tasks here

# This code will only run if the script is executed directly (not imported)
if __name__ == "__main__":
    # Create an instance of the class
    obj1 = MyClass("Alice", 30)
    
    # Call the display_info method
    obj1.display_info()
    
    # Call the main method
    obj1.main()

#4*4 lük bir arrayi nokta ile doldurmak için:
    n= 4
    board = [["."] * n for i in range(n)]
    print(board)# [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.']] basar    
    # Sonra bunları 4 kelimeden oluşan bir listeye şöyle çevirirsin:
    copy = ["".join(row) for row in board]
    
#my_set = set()  my_set.add(5)   my_set.add(5)  --> ikinci elemanı eklemez, hata da vermez, sonuç sadece 5 olur.  

#https://www.youtube.com/watch?v=Ph95IHmRp5M     9. dk da anlatıyor.
#2d array de diagonal olarak gidersen row+column ve row-column olarak değer alıyor ve bu o hat boyunca unique. N-queuen sorusunda adam bunu kullanmış, set olarak tutmuş.  