#496. Next Greater Element I
# (739. Daily Temperatures problemi gibi monotonic stack sorusu, stack mantığı daha basit burda)
#https://www.youtube.com/watch?v=Du881K7Jtk8&t=1035s
#Bu videoda güzel anlatmış.

    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        if not nums2:
            return None

        mapping = {}
        result = []
        stack = []
        stack.append(nums2[0])

        for i in range(1, len(nums2)):
            while stack and nums2[i] > stack[-1]:       # if stack is not empty, then compare it's last element with nums2[i]
                mapping[stack[-1]] = nums2[i]           # if the new element is greater than stack's top element, then add this to dictionary 
                stack.pop()                             # since we found a pair for the top element, remove it.
            stack.append(nums2[i])                      # add the element nums2[i] to the stack because we need to find a number greater than this

        for element in stack:                           # if there are elements in the stack for which we didn't find a greater number, map them to -1
            mapping[element] = -1

        for i in range(len(nums1)):
            result.append(mapping[nums1[i]])
        return result



#739. Daily Temperatures
    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:
        result = [0] * len(temperatures) # having list with 0`s elements of same lenght as temperature array.
        stack = [] # taking empty stack. 
        for index, temp in enumerate(temperatures): # Traversing through provided list. 
            while stack and temperatures[stack[-1]] < temp: # stack should not be empty and checking previous temp with current temp. 
                # the above while loop and taking stack for saving index is very common practice in monotonic stack questions. Suggestion: understand it properly. 
                prev_temp = stack.pop() # stack.pop() will provide index of prev temp, taking in separate var as we are using it more then on place. 
                result[prev_temp] = index - prev_temp #at the index of prev_temp and i - prev_temp by this we`ll get how many step we moved to have greater temp. 
            stack.append(index) # in case stack is empty we`ll push index in it. 

        return result # returing the list of number of days to wait. 
    
    #Ben çok sonra kendim tekrar yazmayı denedim ve çalıştı:

        def dailyTemperatures(self, temperatures: List[int]) -> List[int]:
        my_stack = []
        ret_list = []

        my_stack.append(len(temperatures) - 1)
        ret_list.append(0)

        for i in range(len(temperatures) - 2, -1, -1):
            while my_stack:
                if temperatures[i] >= temperatures[my_stack[-1]]:
                    my_stack.pop()
                else:
                    break

            if not my_stack:
                ret_list.append(0)
            else:
                ret_list.append(my_stack[-1] - i)

            my_stack.append(i)
        ret_list.reverse()
        return ret_list


#46. Permutations
    def permute(self, nums: List[int]) -> List[List[int]]:
        visited = set()
        res = []
        self.backtracking(res,visited,[],nums)
        return res
    def backtracking(self,res,visited,subset,nums):
        if len(subset) == len(nums):
            res.append(subset)
        for i in range(len(nums)):
            if i not in visited:
                visited.add(i)
                self.backtracking(res,visited,subset+[nums[i]],nums)
                visited.remove(i)        

#74. Search a 2D Matrix
# 2d array i, 1d gibi hesaplatiyor. 
# left = mid+1 ve right = mid-1 kullanımı önemli. Mid check edildiği için, onu check etmiyor ve bir de while loop tan çıkarıyor.
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix:
            return False
        m, n = len(matrix), len(matrix[0])
        left, right = 0, m * n - 1

        while left <= right:
            mid = (left + right) // 2
            mid_row, mid_col = divmod(mid, n)

            if matrix[mid_row][mid_col] == target:
                return True
            elif matrix[mid_row][mid_col] < target:
                left = mid + 1
            else:
                right = mid - 1

        return False                


#15. 3Sum
#Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
#Notice that the solution set must not contain duplicate triplets.

#Soldan 2 pointer sağdan 1 pointer ile sıkıştırarak geliyor, güzel ve temiz bir çözüm
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        triplets = set()
        for i in range(len(nums) - 2):
            firstNum = nums[i]
            j = i + 1
            k = len(nums) - 1
            while j < k:
                secondNum  = nums[j]
                thirdNum = nums[k]

                potentialSum = firstNum + secondNum + thirdNum 
                if potentialSum > 0:
                    k -= 1
                elif potentialSum < 0:
                    j += 1
                else:
                    triplets.add((firstNum , secondNum ,thirdNum))
                    j += 1
                    k -= 1
        return triplets        


#11. Container With Most Water
'''The optimal solution can be using two pointer approach, i.e.,

keeping left pointer at the left most index of the array
keeping the right pointer at the right most index of the array
ℹ️ as the focus is on maximum area to be covered, keep the pointer which is at the maximum value between the two and play with moving the pointer which has the least of the two elements the pointers are currently pointing to.
The code snippet will be:'''

l=0
r = len(height)-1
height_tracker=0
while l<=r:
    length = r-l
    h = min(height[l],height[r])
    if height_tracker<length*h:
        height_tracker=length*h
    if height[l]<=height[r]:
        l+=1
    else:
        r-=1        


#22. Generate Parentheses
#Recursive yani backtracking için en ideal örnek. Çok ilginç if yerine elif kullanmışım, sadece ((())) üretti. Kafa karıştırıcı ama bu örneği akılda tutmalı:
    def generateParenthesis(self, n: int) -> List[str]:
        ret_list = []

        def genPa(acpa, kapa, concat):

            if acpa == kapa == n:
                ret_list.append(concat)
                return
            if acpa < n:
                genPa(acpa+1, kapa, concat+"(")
            if kapa < acpa:
                genPa(acpa, kapa+1, concat+")")
        
        genPa(0,0,"")
        return ret_list        

#33. Search in Rotated Sorted Array
#<= kullanımı önemli ve nums[0]  yerine nums[i]. Ben önce soldaki mi sağdaki mi parçada arıycaz diye o kontrolü  yapıyordum hata veriyordu.
    def search(self, nums: List[int], target: int) -> int:
        i = 0
        j = len(nums) - 1

        while i <= j:
            mid = (i + j) // 2

            if target == nums[mid]:
                return mid
            elif nums[mid] >= nums[i]:
                if target  > nums[mid] or target < nums[i]:
                    i = mid + 1
                else:
                    j = mid - 1
            else:
                if target  < nums[mid] or target > nums[j]:
                    j = mid - 1
                else:
                    i = mid +1
        return -1

#981. Time Based Key-Value Store
# Eğer init ve diğer methodlar verilip doldurulması istenirse, bu güzel bir örnek:
class TimeMap:

    def __init__(self):
        self.my_dict = {}
        

    def set(self, key: str, value: str, timestamp: int) -> None:
        if key not in self.my_dict:
            self.my_dict[key] = []
        self.my_dict[key].append([value,timestamp])
        

    def get(self, key: str, timestamp: int) -> str:
        ret = ""
        values = self.my_dict.get(key,[])

        i,j = 0, len(values)-1

        while i <= j:
            mid = (i+j)//2
            if values[mid][1] == timestamp:
                return values[mid][0]
            elif  values[mid][1] < timestamp:
                i = mid + 1
                ret = values[mid][0]
            else:
                j = mid - 1
        
        return ret   

#456. 132 Pattern
# Stack i her elemanı 2 liste olan bir liste olarak düşünmüş.
#[max_element, min_element] gibi gitmesi gerekiyor ki, yeni gelen sayı bu ikisinin arasında mı diye bakabilesin.
#Stack.pop yapıyor daha büyük eleman gelince ama min element değişmiyor, yeni halini tekrar append ediyor.
#Arada sayı gelince de true dönüyorsun.
https://www.youtube.com/watch?v=q5ANAl8Z458        

    def find132pattern(self, nums: List[int]) -> bool:
        my_stack = []
        min_elm = nums[0]

        for i in range(1,len(nums)):
            while my_stack and my_stack[-1][0]<=nums[i]:
                my_stack.pop()

            min_elm = min(min_elm, nums[i])

            if my_stack and my_stack[-1][1] < nums[i]:
                return True

            my_stack.append([nums[i], min_elm])
        return False

#567. Permutation in String
#
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False

        s1Count, s2Count = [0] * 26, [0] * 26
        for i in range(len(s1)):
            s1Count[ord(s1[i]) - ord("a")] += 1
            s2Count[ord(s2[i]) - ord("a")] += 1

        matches = 0
        for i in range(26):
            matches += 1 if s1Count[i] == s2Count[i] else 0

        l = 0
        for r in range(len(s1), len(s2)):
            if matches == 26:
                return True

            index = ord(s2[r]) - ord("a")
            s2Count[index] += 1
            if s1Count[index] == s2Count[index]:
                matches += 1
            elif s1Count[index] + 1 == s2Count[index]:
                matches -= 1

            index = ord(s2[l]) - ord("a")
            s2Count[index] -= 1
            if s1Count[index] == s2Count[index]:
                matches += 1
            elif s1Count[index] - 1 == s2Count[index]:
                matches -= 1
            l += 1
        return matches == 26